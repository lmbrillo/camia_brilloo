Student-Friendly Study Planner: A Python-runned Time Management Tool for Students!

1. Problem Statement

Many students struggle with effective time management due to unorganized study schedules and conflicting deadlines. 
My Study Planner project addresses this by creating a simple, text-based study planner that generates rule-based schedules and provides guidance for students struggling to figure out which to do first like me. 
The entire application will be built exclusively in Python, utilizing its library features instead of complex databases to manage data and user interaction.

2. Core Features

I envision the application being operated as a simple Python script, designed to accept simple inputs to run the program without problems.

Data Storage (Schedules, Deadlines etc.) 

- All task data will be stored in a single plain text file (tasks.txt).

- Each task will be saved as a single line of text where values are separated by a delimiter ( a comma or pipe |).

- To convert between the files text lines and the data structures, I will be using Python's string manipulation methods such as split(), join(), and strip().

Task Structure and how It will manage tasks:

Task Input: When the script runs to add a task, it will prompt the user for the following details, which will be saved as a string to the tasks.txt file that will be storing the data:

ID (This will be the unique identifier for the task of the student)

Subject (str)

Due Date (str: YYYY-MM-DD)

Estimated Time (Hours) (in int)

Priority (int: 1=High, 3=Low)

Status (str: Pending/Completed)

Schedule Generation: The script will read all lines from tasks.txt and this will hopefully immediately sort and display the schedule made by the student.

Rule-Based Logic

Prioritization Function: The scheduling logic will be a function that sorts the list of pending tasks. The sorting will be based on two criteria: due date proximity (earliest first) and then priority level (lowest number first).

The Output would look something like this:

1|English Quiz Review|2025-11-20|3|1|Pending
2|CS2 LONG QUIZ Review|2025-11-15|1|2|Pending
3|Algebra Homework|2025-11-18|2|1|Completed

3. Technical Stack:

Interface: The interface will be displayed using standard print() for outputs and input() for receiving data. The script will run, prompt the user with options whether to add a task or to view the schedule they've made (e.g., Add Task or View Schedule).

Data Structures: The task data will be held inside the script as Lists of Dictionaries, a simple structure used for sorting and processing the information.

Core Logic:

File I/O: Reading and writing to files using methods like open(), read(), write(), and close().

String Manipulation: I'll use core Python methods like split(), join(), and find() to reliably change the task information between being a simple text line (for the txt.file storing the data from the user) and a structured list (for the program to display the schedule).

Datetime Operations: The datetime module will be used to correctly interpret the due dates to accurately sort and to determine which one is more important.

4. Development Milestones

These steps ensure a progression from a simple text file storage from the user inputs to being able to output functional scheduling logic.

Phase 1: Basic File Handling

To implement the ability to read all lines from the tasks.txt file, I'll use the with open('tasks.txt', 'r') as f: statement and the f.readlines() method.

To implement the ability to add a new task, I will be taking user input and adding a new formatted string line to tasks.txt using the with open('tasks.txt', 'a') as f: statement and the f.write() method.

To develop robust error handling for file access and input validation (e.g. checking if the file exists) using try...except blocks.

Phase 2: Data Translation and Display

To create a function to parse a single text line (string) into a dictionary. I will use the string.split('|') method to separate the data, ensuring type casting (converting string numbers to integers) is performed correctly.

To create a function to save a dictionary back into a text line. I'll use the '|'.join(list_of_values) method to combine the fields.

This will display the raw list of tasks by reading the file, parsing the data, and printing the results in a formatted, columnar layout to the console.

Phase 3: Scheduling Logic

To integrate the datetime module, I will be using the datetime.strptime() to convert the string due dates into actual datetime objects for accurate comparison and sorting.

To implement the Rule-Based Prioritization Function using a custom function as the key argument in Python's sorted() method to sort by multiple criteria (due date, then priority).

Develop the ability to mark a task as completed by reading the full file content, updating the 'Status' field for the selected task in memory, and then rewriting the entire file contents using with open('tasks.txt', 'w').
